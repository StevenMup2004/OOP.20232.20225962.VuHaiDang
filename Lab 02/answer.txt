

Question 1: If you create a constructor method to build a DVD by title then create a constructor method to build a DVD by category. Does JAVA allow you to do this? 
Yes, Java allows to create multiple constructor methods in a class with different parameter lists, including constructors that accept different types or numbers of parameters. 
This feature is known as constructor overloading. Each constructor can perform different initialization tasks based on the parameters it receives.


Question 2: Try to add a method addDigitalVideoDisc which allows to pass an arbitrary number of arguments for dvd. Compared to an array parameter. What do you prefer in this case?
I prefer to using varargs due to its simplicity and flexibility. It allows you to pass any number of DigitalVideoDisc objects directly to the method without needing to create an array explicitly. This leads to cleaner and more concise code.


Question 3: Is JAVA a Pass by Value or a Pass by Reference programming language?
Java is a pass-by-value programming language.
Java passes all arguments to a method in form of pass by-value: 
• For arguments of value-based data types (primitive data types):  passing value/copy of primitive data type argument
• For argument of reference-based data types (array and object):  passing value/copy of original reference


Question 4: After the call of swap(jungleDVD, cinderellaDVD) why does the title of these two objects still remain? 
The title of these two objects still remain because in the swap method, the values of o1 and o2 are swapped locally within the method.
However, Java passes method arguments by value, which means that the method receives copies of the references to the actual objects jungleDVD and cinderellaDVD.
When swap modifies o1 and o2, it only modifies the copies of the references, not the original references held by jungleDVD and cinderellaDVD.
Thus, the original objects remain unchanged, and their titles are not affected.

Question 5: After the call of changeTitle(jungleDVD, cinderellaDVD.getTitle()) why is the title of the JungleDVD changed? 
The title of the JungleDVD changed because in the changeTitle method, jungleDVD is passed as an argument to changeTitle, a copy of the reference to the jungleDVD object is received.
Inside this method, changes to the state of the object affect the original object because the reference points to the same object in memory.
Therefore, when the title is changed using setTitle, it reflects the change in the original jungleDVD object outside of the method.